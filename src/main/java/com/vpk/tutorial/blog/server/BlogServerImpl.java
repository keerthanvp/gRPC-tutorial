package com.vpk.tutorial.blog.server;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.proto.blog.*;
import io.grpc.Status;
import io.grpc.stub.StreamObserver;
import org.bson.Document;
import org.bson.types.ObjectId;

import static com.mongodb.client.model.Filters.eq;

public class BlogServerImpl extends BlogServiceGrpc.BlogServiceImplBase {

    private MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
    private MongoDatabase mongoDatabase = mongoClient.getDatabase("tutorial");
    private MongoCollection<Document> mongoCollection = mongoDatabase.getCollection("blog");

    @Override
    public void createBlog(CreateBlogRequest request, StreamObserver<CreateBlogResponse> responseObserver) {

        System.out.println("Received create Blog request");
        Blog blog = request.getBlog();

        Document doc = new Document("author_id",blog.getAuthorId())
                .append("title",blog.getTitle())
                .append("content",blog.getContent());

        System.out.println("Inserting blog...");
        mongoCollection.insertOne(doc);

        String id = doc.getObjectId("_id").toString();  //fetch id generated by mongoDB
        System.out.println("Inserted blog: "+id);

        responseObserver.onNext(CreateBlogResponse.newBuilder()
                .setBlog(blog.toBuilder()
                        .setId(id)
                        .build())
                .build());

        responseObserver.onCompleted();

    }

    @Override
    public void readBlog(ReadBlogRequest request, StreamObserver<ReadBlogResponse> responseObserver) {
        System.out.println("Received read blog request");
        String blogId = request.getBlogId();

        System.out.println("Searching for the blog");
        Document result = mongoCollection.find(eq("_id",new ObjectId(blogId)))
                .first();

        if (result == null){
            System.out.println("Blog not found");
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("Blog with corresponding id not found")
                            .asRuntimeException()
            );
        }else {
            System.out.println("Blog found, sending response...");
            Blog blog = blogBuilder(result);

            responseObserver.onNext(
                    ReadBlogResponse.newBuilder()
                            .setBlog(blog)
                            .build());
            responseObserver.onCompleted();
        }
    }

    @Override
    public void updateBlog(UpdateBlogRequest request, StreamObserver<UpdateBlogResponse> responseObserver) {
        System.out.println("Received update blog request");
        Blog newBlog = request.getBlog();
        String blogId = newBlog.getId();

        System.out.println("Searching for the blog");
        Document result = null;
        try{
            result = mongoCollection.find(eq("_id",new ObjectId(blogId)))
                    .first();
        }catch (Exception e){
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("Blog with corresponding id not found")
                            .augmentDescription(e.getLocalizedMessage())
                            .asRuntimeException()
            );
        }

        if (result == null){
            System.out.println("Blog not found");
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("Blog with corresponding id not found")
                            .asRuntimeException()
            );
        }else {
            Document replacement = new Document("author_id",newBlog.getAuthorId())
                    .append("title",newBlog.getTitle())
                    .append("content",newBlog.getContent())
                    .append("_id",new ObjectId(blogId));

            mongoCollection.replaceOne(eq("_id",result.getObjectId("_id")),replacement);

            System.out.println("Updating the blog...");
            responseObserver.onNext(
                    UpdateBlogResponse.newBuilder()
                            .setBlog(blogBuilder(replacement))
                            .build());
            responseObserver.onCompleted();
        }
    }

    @Override
    public void deleteBlog(DeleteBlogRequest request, StreamObserver<DeleteBlogResponse> responseObserver) {
        
    }

    private Blog blogBuilder(Document document){
        return Blog.newBuilder()
                .setAuthorId(document.getString("author_id"))
                .setTitle(document.getString("title"))
                .setContent(document.getString("content"))
                .setId(document.getObjectId("_id").toString())
                .build();
    }
}
